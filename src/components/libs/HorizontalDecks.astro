---
import "swiper/css";
import "swiper/css/pagination";
import HorizontalPagination from "./HorizontalPagination.astro";

interface Props {
  showPagination?: boolean;
}

const { showPagination = false } = Astro.props;
---

<div class="swiper deck-container" data-swiper="horizontal">
  <ul class="swiper-wrapper decks" role="list" aria-roledescription="carousel">
    <slot />
  </ul>

  {showPagination && <HorizontalPagination />}

  <div class="overlay-layer">
    <slot name="overlay" />
  </div>
</div>

<style>
  .deck-container {
    width: calc(100vh * 9 / 16);
    position: relative;
  }

  .overlay-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 100;
  }
</style>

<script>
  import { Swiper } from "swiper";
  import { Mousewheel, Pagination } from "swiper/modules";

  document
    .querySelectorAll('[data-swiper="horizontal"]')
    .forEach((container) => {
      if (!(container instanceof HTMLElement)) {
        return;
      }
      const paginationEl = container.querySelector(".horizontal-pagination");

      new Swiper(container, {
        modules: [Mousewheel, Pagination],
        direction: "horizontal",
        slidesPerView: 1,
        spaceBetween: 0,
        nested: true,
        touchReleaseOnEdges: true,
        mousewheel: {
          enabled: true,
          forceToAxis: true,
          thresholdDelta: 10,
        },
        pagination: paginationEl ? {
          el: paginationEl as HTMLElement,
          clickable: true,
        } : undefined,
        on: {
          slideChange: () => {
            // 全ての動画の再生位置をリセット
            const allVideos = container.querySelectorAll("video");
            allVideos.forEach((video) => {
              if (video instanceof HTMLVideoElement) {
                video.currentTime = 0;
              }
            });
          },
        },
      });
    });
</script>
